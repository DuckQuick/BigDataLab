
#前言

# 环境配置

操作系统：联想(Lenovo)笔记本电脑(i7-7700HQ) Windows 10 64位 家庭中文版

语言：python3

库：OpenMV库（包括sensor、image、pyb、pid）、micropython库

软件：OpenMV IDE用于OpenMV Cam的代码编写、编译、调节、图像绘制等等功能

硬件：OpenMV Cam M7 - OV7725 、焦距为2.8mm的摄像头、 3D打印舵机 、 3.7V 1000mAh锂电池 、 USB数据线

# 原理简述

##机器视觉与计算机视觉

###机器视觉（Machine Vision, MV）
**机器视觉**是指用计算机来实现人的视觉功能，也就是用计算机来实现对客观的三维世界的识别。

###计算机视觉(Computer Vision, CV）
**计算机视觉**是指用摄影机和计算机代替人眼对目标进行识别、跟踪和测量等机器视觉，并进一步做图像处理，用计算机处理成为更适合人眼观察或传送给仪器检测的图像。

###MV与CV的区别
**计算机视觉**的研究对象主要是**映射到单幅或多幅图像上的三维场景**，例如三维场景的重建。

**机器视觉**主要是指**工业领域的视觉研究**，例如自主机器人的视觉，用于检测和测量的视觉。
![Vision]

[Vision]: images/Vision.png "Vision" { width:auto; max-width:90% }

_**总的来说，机器视觉侧重对量的分析，计算机视觉侧重对质的分析。**_

##OpenMV Cam
### OpenMV Cam简介
**OpenMV Cam**是一款低价，可扩展，支持**Python**的**机器视觉模块**，这个模块的目标是成为**“机器视觉世界的Arduino”**。
OpenMV搭载**MicroPython解释器**，这允许你在嵌入式上使用**Python**来编程。

![OpenMV Cam]

[OpenMV Cam]: images/OpenMV-Cam.png "OpenMV Cam" { width:auto; max-width:90% }

###OpenMV Cam应用
**常用的有颜色识别、形状识别、二维码识别、人脸识别、边缘检测、特征点追踪等等。**
![functions]

[functions]: images/functions.png "functions" { width:auto; max-width:90% }

**解魔方机器人：**

![Rubik's cube robot]

[Rubik's cube robot]: images/Rubik-s-cube-robot.jpg "Rubik's cube robot" { width:auto; max-width:90% }


###OpenMV Cam的优点与不足
优点：

1. 支持Python语法，即Micropython库，即可用python写实现功能的代码。
2. 板子自带解释器且官方自带IDE，编写代码、调试方便。
3. 可以完全控制OpenMV，包括IO引脚。

不足：

1. 内置RAM小，不足以同时处理多张图片。
2. OV7725感光元件最多处理640×480 RGB565彩色图像。
3. 价格对于学生来说偏贵。


### OpenMV Cam M7 - OV7725
**OpenMV3 Cam M7**是目前**OpenMV系列**性能最优秀的版本。

![Openmv Cam M7 - OV7725 (1)]

[Openmv Cam M7 - OV7725 (1)]: images/Openmv-Cam-M7---OV7725-(1).png "Openmv Cam M7 - OV7725 (1)" { width:auto; max-width:90% }

**参数表：**

|---------|-------------|
| Tables  | OpenMV3(M7) |
+---------|:-----------:+
| Pin     | 10          |
| ADC/DAC | 1           |
| SPI     | 1           |
| I2C     | 2           |
| UART    | 1           |
| Servo   | 3           |
| CAN bus | 1           |
| IC      | STM32F765   |
| RAM     | 512KB       |
| Flash   | 2MB         |
|Frequency| 216MHz      |
|---------|-------------|

## 人脸识别算法

###Haar特征

**哈尔特征** 是用于物体识别的一种数字图像特征。它们因为与哈尔小波转换极为相似而得名，**是第一种即时的人脸检测运算**。

哈尔特征使用**检测窗口中指定位置的相邻矩形，计算每一个矩形的像素和并取其差值**。然后用这些差值来对图像的子区域进行分类。

哈尔特征最主要的优势是**它的计算非常快速**。使用一个称为**积分图**的结构，任意尺寸的哈尔特征可以在常数时间内进行计算。


![积分图]

[积分图]: images/-.jpg "积分图" { width:auto; max-width:90% }


**
如图所示的一个m*m大小的子窗口，可以计算在这么大的子窗口内存在多少个矩形特征。
**

**
特征范围(x2-x1,y2-y1)由左上角点A与右下角点B确定，即两个(x,y)不同的点确定了一个矩形。
**

![窗口矩形]

[窗口矩形]: images/-.JPG "窗口矩形" { width:auto; max-width:90% }



**图中两个矩形特征，表示出人脸的某些特征。**

![haar人脸]

[haar人脸]: images/haar-.JPG "haar人脸" { width:auto; max-width:90% }


比如中间一幅表示**眼睛区域的颜色比脸颊区域的颜色深**，右边一幅表示**鼻梁两侧比鼻梁的颜色要深**。同样，其他目标，如眼睛等，也可以用一些矩形特征来表示。

**使用特征比单纯地使用像素点具有很大的优越性，并且速度更快**。

### 决策树

决策树是一个树结构（可以是二叉树或非二叉树）。其每个非叶节点表示一个特征属性上的测试，每个分支代表这个特征属性在某个值域上的输出，而每个叶节点存放一个类别。

![特征决策树]


# 项目各功能描述

##实现人脸识别

因为OpenMV Cam自有特定的库，比如sensor感光元件库、image机器视觉库等等，所以能很方便的调用来实现所需功能，但却不支持numpy等等较大的库。

``` python
  import sensor, image
```

首先，初始化感光元件，这里为了匹配了摄像头的参数而对感光元件进行必要的设置，比如对比度、相机帧大小、像素模式（灰度图、RGB565彩色图）等等。
``` python
  sensor.reset()
  sensor.set_contrast(1) #对比度
  sensor.set_gainceiling(16) #图像增益上限
  sensor.set_framesize(sensor.HQVGA) #相机帧大小
  sensor.set_pixformat(sensor.GRAYSCALE) #像素模式
```
其次，加载haar人脸识别算法。
``` python
  face_cascade = image.HaarCascade("frontalface", stages=25) #加载人脸模型
```
最后，拍照，通过照片进行特征分析，如果分析到人脸则在IDE里的帧缓冲图像区画出匹配的方框。

``` python
  while (True):
      img = sensor.snapshot() #拍照
      objects = img.find_features(face_cascade, threshold=0.75, scale_factor=1.25) #寻找特征点，匹配人脸
      for r in objects:
          img.draw_rectangle(r) #画方框
```
例图：

![0-pic]

[0-pic]: images/0-pic.png "0-pic" { width:auto; max-width:90% }

##实现人脸识别追踪 

#源码

## 人脸识别代码
```python
  import sensor, image

  sensor.reset()
  
  sensor.set_contrast(1)
  sensor.set_gainceiling(16)
  sensor.set_framesize(sensor.HQVGA)
  sensor.set_pixformat(sensor.GRAYSCALE)
  
  face_cascade = image.HaarCascade("frontalface", stages=25)
  
  while (True):
  
      img = sensor.snapshot()
  
      objects = img.find_features(face_cascade, threshold=0.75, scale_factor=1.25)
  
      for r in objects:
          img.draw_rectangle(r)
```

#结语及展望

#参考资料
##英文注解：
1. Machine Vision（MV）：机器视觉
2. Computer Vision（CV）：计算机视觉
3. Cam（Camera）：摄像头
4. OV7725：感光元件型号
5. Pin：I/O引脚（Input / Output）
6. ADC（Analog-to-digital converter）：模拟数字转换器
7. DAC（Digital to analog converter）：数字模拟转换器
8. SPI（Serial Peripheral Interface Bus）：串行外设接口
9. I2C（Inter-Integrated Circuit）：集成电路总线
10. UART（Universal Asynchronous Receiver/Transmitter）：异步串行通信口
11. Servo：这里指的是舵机
12. CAN bus（Controller Area Network）：控制器局域网
13. IC（Integrated Circuit）：集成电路，这里指微芯片，即STM32F765VI ARM CortexM7处理器
14. RAM（Random Access Memory）：随机存取存储器，也叫主存
15. Flash（Flash Memory）：快闪存储器，也叫闪存
16. Frequency：频率





